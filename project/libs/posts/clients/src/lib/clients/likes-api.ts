/* tslint:disable */
/* eslint-disable */
/**
 * The «posts» service
 * posts service API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { CreateLikeDto } from '../models';
// @ts-ignore
import { LikeRdo } from '../models';
// @ts-ignore
import { LikesRdo } from '../models';
// @ts-ignore
import { RemoveLikeDto } from '../models';
/**
 * LikesApi - axios parameter creator
 * @export
 */
export const LikesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateLikeDto} createLikeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (createLikeDto: CreateLikeDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createLikeDto' is not null or undefined
            assertParamExists('create', 'createLikeDto', createLikeDto)
            const localVarPath = `/api/likes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createLikeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} postId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll: async (postId: string, authorId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('findAll', 'postId', postId)
            // verify required parameter 'authorId' is not null or undefined
            assertParamExists('findAll', 'authorId', authorId)
            const localVarPath = `/api/likes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (postId !== undefined) {
                localVarQueryParameter['postId'] = postId;
            }

            if (authorId !== undefined) {
                localVarQueryParameter['authorId'] = authorId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RemoveLikeDto} removeLikeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove: async (removeLikeDto: RemoveLikeDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'removeLikeDto' is not null or undefined
            assertParamExists('remove', 'removeLikeDto', removeLikeDto)
            const localVarPath = `/api/likes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(removeLikeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LikesApi - functional programming interface
 * @export
 */
export const LikesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LikesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateLikeDto} createLikeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(createLikeDto: CreateLikeDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LikeRdo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(createLikeDto, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LikesApi.create']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} postId 
         * @param {string} authorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAll(postId: string, authorId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LikesRdo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAll(postId, authorId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LikesApi.findAll']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {RemoveLikeDto} removeLikeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remove(removeLikeDto: RemoveLikeDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LikeRdo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.remove(removeLikeDto, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LikesApi.remove']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * LikesApi - factory interface
 * @export
 */
export const LikesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LikesApiFp(configuration)
    return {
        /**
         * 
         * @param {LikesApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: LikesApiCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<LikeRdo> {
            return localVarFp.create(requestParameters.createLikeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LikesApiFindAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll(requestParameters: LikesApiFindAllRequest, options?: RawAxiosRequestConfig): AxiosPromise<LikesRdo> {
            return localVarFp.findAll(requestParameters.postId, requestParameters.authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LikesApiRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove(requestParameters: LikesApiRemoveRequest, options?: RawAxiosRequestConfig): AxiosPromise<LikeRdo> {
            return localVarFp.remove(requestParameters.removeLikeDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for create operation in LikesApi.
 * @export
 * @interface LikesApiCreateRequest
 */
export interface LikesApiCreateRequest {
    /**
     * 
     * @type {CreateLikeDto}
     * @memberof LikesApiCreate
     */
    readonly createLikeDto: CreateLikeDto
}

/**
 * Request parameters for findAll operation in LikesApi.
 * @export
 * @interface LikesApiFindAllRequest
 */
export interface LikesApiFindAllRequest {
    /**
     * 
     * @type {string}
     * @memberof LikesApiFindAll
     */
    readonly postId: string

    /**
     * 
     * @type {string}
     * @memberof LikesApiFindAll
     */
    readonly authorId: string
}

/**
 * Request parameters for remove operation in LikesApi.
 * @export
 * @interface LikesApiRemoveRequest
 */
export interface LikesApiRemoveRequest {
    /**
     * 
     * @type {RemoveLikeDto}
     * @memberof LikesApiRemove
     */
    readonly removeLikeDto: RemoveLikeDto
}

/**
 * LikesApi - object-oriented interface
 * @export
 * @class LikesApi
 * @extends {BaseAPI}
 */
export class LikesApi extends BaseAPI {
    /**
     * 
     * @param {LikesApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesApi
     */
    public create(requestParameters: LikesApiCreateRequest, options?: RawAxiosRequestConfig) {
        return LikesApiFp(this.configuration).create(requestParameters.createLikeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LikesApiFindAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesApi
     */
    public findAll(requestParameters: LikesApiFindAllRequest, options?: RawAxiosRequestConfig) {
        return LikesApiFp(this.configuration).findAll(requestParameters.postId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LikesApiRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesApi
     */
    public remove(requestParameters: LikesApiRemoveRequest, options?: RawAxiosRequestConfig) {
        return LikesApiFp(this.configuration).remove(requestParameters.removeLikeDto, options).then((request) => request(this.axios, this.basePath));
    }
}

