// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Author {
  id                   String         @id @unique @db.Char(24)
  createdAt            DateTime       @default(now()) @map("created_at")
  ownersPosts          Post[]         @relation("PostOwner")
  authorsPosts         Post[]         @relation("PostAuthor")
  authorsComments      Comment[]      @relation("CommentAuthor")
  authorsLikes         Like[]         @relation("LikeAuthor")
  authorsSubscribers   Subscription[] @relation("SubscriptionAuthor")
  authorsSubscriptions Subscription[] @relation("SubscriptionSubscriber")

  @@map("authors")
}

model Post {
  id          String     @id @default(uuid()) @db.Uuid
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  publishAt   DateTime   @default(now()) @map("publish_at")
  authorId    String     @map("author_id") @db.Char(24)
  author      Author     @relation("PostAuthor", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId     String?    @map("owner_id") @db.Char(24)
  owner       Author?    @relation("PostOwner", fields: [ownerId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  ownerPostId String?    @map("owner_post_id") @db.Uuid
  ownerPost   Post?      @relation("OwnerPost", fields: [ownerPostId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  ownerPosts  Post[]     @relation("OwnerPost")
  reposted    Boolean?   @default(false)
  postType    PostType   @default(TEXT)
  postStatus  PostStatus @default(PUBLISHED)
  payload     Json
  comments    Comment[]  @relation("PostComments")
  tags        Tag[]      @relation("PostTags")
  likes       Like[]     @relation("PostLikes")

  @@map("posts")
}

enum PostType {
  VIDEO
  TEXT
  QUOTE
  PHOTO
  LINK
}

enum PostStatus {
  PUBLISHED
  DRAFT
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  authorId  String   @map("author_id") @db.Char(24)
  author    Author   @relation("CommentAuthor", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String   @map("post_id") @db.Uuid
  post      Post     @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  message   String   @db.VarChar()

  @@index([message])
  @@map("comments")
}

model Tag {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  text      String   @unique @db.VarChar(100)
  posts     Post[]   @relation("PostTags")

  @@index([text])
  @@map("tags")
}

model Like {
  authorId  String   @map("author_id") @db.Char(24)
  author    Author   @relation("LikeAuthor", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String   @map("post_id") @db.Uuid
  post      Post     @relation("PostLikes", fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([authorId, postId])
  @@map("likes")
}

model Subscription {
  authorId     String   @map("author_id") @db.Char(24)
  author       Author   @relation("SubscriptionAuthor", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subscriberId String   @map("subscriber_id") @db.Char(24)
  subscriber   Author   @relation("SubscriptionSubscriber", fields: [subscriberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subscribedAt DateTime @default(now())

  @@id([authorId, subscriberId])
  @@map("subscriptions")
}
